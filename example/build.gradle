import org.jdom2.Attribute
import org.jdom2.Document
import org.jdom2.Element
import org.jdom2.input.SAXBuilder
import org.jdom2.output.Format
import org.jdom2.output.LineSeparator
import org.jdom2.output.XMLOutputter

class AndroidUnusedResourcesRemoverPlugin implements Plugin<Project> {

    @Override
    void apply(Project project) {
        println "ls ${project.rootProject.projectDir.path}".execute().text
        project.rootProject.allprojects.each { value ->
//            println "hoe ${value.name}"
        }

        Document doc = new SAXBuilder().build(new FileInputStream("${project.projectDir.path}/src/main/res/values/styles.xml"))

        Element root = doc.getRootElement()

        Iterator<Element> stylesIterator = root.getChildren("style").iterator()

        while (stylesIterator.hasNext()) {
            Element style = stylesIterator.next()
            Attribute name = style.getAttribute("name")

            if (name.value == 'AppTheme') {
                stylesIterator.remove()

                println root.children
                println "hogehoge"
            }
        }

        new XMLOutputter().with {
            format = Format.getRawFormat()
            format.setLineSeparator(LineSeparator.NONE)
            // XmlOutputter can write to OutputStream or Writer, which is sufficient for most cases
            output(doc, System.out)
            output(doc, new FileOutputStream("${project.projectDir.path}/src/main/res/values/styles.xml"))
        }

//
//        def parsed = new XmlParser().parseText(xml)
//        parsed.each { node ->
//            println "node: ${node.@name}"
//        }
//
//        parsed.find { it.@name == "AppTheme" }.replaceNode {}
//
//        println parsed

//        def printer = new XmlNodePrinter(new PrintWriter(new FileWriter(new File("${project.projectDir.path}/src/main/res/values/styles.xml"))))
//        printer.namespaceAware = true
//        printer.preserveWhitespace = true
//        printer.print(parsed)

//        def doc = DOMBuilder.parse(new StringReader(parsed.text()))
//        def root = doc.documentElement
//
//        def result = groovy.xml.dom.DOMUtil.serialize(root)
//        println result
    }
}

apply plugin: AndroidUnusedResourcesRemoverPlugin

apply plugin: 'com.android.application'

apply plugin: 'kotlin-android'

apply plugin: 'kotlin-android-extensions'

android {
    compileSdkVersion 27
    defaultConfig {
        applicationId "com.konifar.aurr"
        minSdkVersion 19
        targetSdkVersion 27
        versionCode 1
        versionName "1.0"
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
    implementation 'com.android.support:appcompat-v7:27.1.1'
    implementation 'com.android.support.constraint:constraint-layout:1.1.0'
    implementation 'com.android.support:design:27.1.1'
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'com.android.support.test:runner:1.0.2'
    androidTestImplementation 'com.android.support.test.espresso:espresso-core:3.0.2'
}
